IncludeScript("vs_library")
::SMain <- this;
VS.GetSoloPlayer();
::s <- this

// Requirements:
//    vs_library
//    logic_eventlistener : player_say
//    logic_eventlistener : player_info
//    logic_eventlistener : player_connect
//    logic_eventlistener : bullet_impact

function SetupPlayers( ent )
{
	if( ent.GetClassname() != "player" ) return
	ent.ValidateScriptScope()
	local scope = ent.GetScriptScope()

	// if the player is not set up
	if( !("goggles" in scope) )
	{
		// adds userid/networkid/name
		VS.ValidateUserid( ent )
		scope.goggles <- false
		Chat("Invisible Bridges Loaded")
	}
}

function OnImpact(player)
{
	local scope = player.GetScriptScope()
	if (scope.goggles == false)
	{
		gogglesOn()
		delay( "scope.goggles = true", 0.1 )
	}
	gogglesOff()
	delay( "scope.goggles = false", 0.1 )
}

::OnGameEvent_bullet_impact <- function( data )
{
	local player = VS.GetHandleByUserid(data.userid)
	s.OnImpact(player)
}

function gogglesOn()
{
	Chat(" Goggles On")
	EntFire("bridge*", "Disable")
	EntFire("visibridge*", "Enable")
}

function gogglesOff()
{
	Chat(" Goggles Off")
	EntFire("bridge*", "Enable")
	EntFire("visibridge*", "Disable")
}

::OnGameEvent_player_say <- function( data )
{
	local msg = data.text

	if( msg.slice(0,1) != "!") return
	SMain.say_cmd( msg.slice(1).tolower() )
}

function say_cmd( str )
{
	local buffer = split(str, " ")
	local val, cmd = buffer[0]
	try( val = buffer[1] ) catch(e){}

	switch( cmd.tolower() )
	{
	
		case "see":
		case "goggles":
			gogglesOn()
			break			
		case "play":
		case "nogoggles":
			gogglesOff()
			break
		case "r":
		case "reset":
			resetPlayer()
			break			
		case "help":
			//help command()
			break
		default:
			Chat("Invalid command.")
	}
}

function resetPlayer()
{
	local pos = Vector(0,0,0)
	HPlayer.SetOrigin(pos)
}
